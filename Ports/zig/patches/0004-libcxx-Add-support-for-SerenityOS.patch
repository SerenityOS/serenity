From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: sin-ack <sin-ack@protonmail.com>
Date: Tue, 27 Sep 2022 00:08:46 +0000
Subject: [PATCH] [libcxx] Add support for SerenityOS

This commit teaches libc++ about what features are available in our
LibC, namely:
* We do not have locale support, so no-op shims should be used in place
  of the C locale API.
* The number of errno constants defined by us is given by the value of
  the `ELAST` macro.
* Multithreading is implemented though the pthread library.
* Use libc++'s builtin character type table instead of the one provided
  by LibC as there's a lot of extra porting work to convince the rest of
  locale.cpp to use our character type table properly.

This commit is an adaptation of the LLVM patch by Daniel Bertalan to fit
the layout of the zig-bootstrap project.

Co-Authored-By: Daniel Bertalan <dani@danielbertalan.dev>
Co-Authored-By: Linus Groh <mail@linusgroh.de>
---
 zig/lib/libcxx/include/__config               |  5 +++--
 .../include/__locale_dir/locale_base_api.h    |  2 ++
 .../__locale_dir/locale_base_api/serenity.h   | 22 +++++++++++++++++++
 .../libcxx/include/__locale_dir/messages.h    |  2 +-
 .../include/__support/ibm/locale_mgmt_zos.h   |  2 +-
 zig/lib/libcxx/src/include/config_elast.h     |  2 ++
 .../libcxx/src/support/ibm/xlocale_zos.cpp    |  2 ++
 zig/src/libs/libcxx.zig                       |  3 ++-
 8 files changed, 35 insertions(+), 5 deletions(-)
 create mode 100644 zig/lib/libcxx/include/__locale_dir/locale_base_api/serenity.h

diff --git a/zig/lib/libcxx/include/__config b/zig/lib/libcxx/include/__config
index 41cb6ac3b68909a53ff2e91ce8e25d36b878ca0c..a0c82b477a074f3eb67efaf200905d2026b50586 100644
--- a/zig/lib/libcxx/include/__config
+++ b/zig/lib/libcxx/include/__config
@@ -842,7 +842,8 @@ typedef __char32_t char32_t;
         defined(__APPLE__) ||                                                                                          \
         defined(__MVS__) ||                                                                                            \
         defined(_AIX) ||                                                                                               \
-        defined(__EMSCRIPTEN__)
+        defined(__EMSCRIPTEN__) ||                                                                                     \
+        defined(__serenity__)
 // clang-format on
 #      undef _LIBCPP_HAS_THREAD_API_PTHREAD
 #      define _LIBCPP_HAS_THREAD_API_PTHREAD 1
@@ -925,7 +926,7 @@ typedef __char32_t char32_t;
 #  endif
 
 #  if defined(__BIONIC__) || defined(__NuttX__) || defined(__Fuchsia__) || defined(__wasi__) ||                        \
-      _LIBCPP_HAS_MUSL_LIBC || defined(__OpenBSD__) || defined(__LLVM_LIBC__)
+      _LIBCPP_HAS_MUSL_LIBC || defined(__OpenBSD__) || defined(__LLVM_LIBC__) || defined(__serenity__)
 #    define _LIBCPP_PROVIDES_DEFAULT_RUNE_TABLE
 #  endif
 
diff --git a/zig/lib/libcxx/include/__locale_dir/locale_base_api.h b/zig/lib/libcxx/include/__locale_dir/locale_base_api.h
index 5e6c69e95e72272e364eaede55f84e102a5c7fb9..4c0dc7894f343bb67217b263461cee38767f65cc 100644
--- a/zig/lib/libcxx/include/__locale_dir/locale_base_api.h
+++ b/zig/lib/libcxx/include/__locale_dir/locale_base_api.h
@@ -136,6 +136,8 @@
 #      include <__locale_dir/locale_base_api/android.h>
 #    elif defined(__OpenBSD__)
 #      include <__locale_dir/locale_base_api/openbsd.h>
+#    elif defined(__serenity__)
+#      include <__locale_dir/locale_base_api/serenity.h>
 #    elif defined(__wasi__) || _LIBCPP_HAS_MUSL_LIBC
 #      include <__locale_dir/locale_base_api/musl.h>
 #    endif
diff --git a/zig/lib/libcxx/include/__locale_dir/locale_base_api/serenity.h b/zig/lib/libcxx/include/__locale_dir/locale_base_api/serenity.h
new file mode 100644
index 0000000000000000000000000000000000000000..13abb601dcb75d1459df0b943ef6ca3e911c8e46
--- /dev/null
+++ b/zig/lib/libcxx/include/__locale_dir/locale_base_api/serenity.h
@@ -0,0 +1,22 @@
+//===----------------------------------------------------------------------===//
+//
+// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
+// See https://llvm.org/LICENSE.txt for license information.
+// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
+//
+//===----------------------------------------------------------------------===//
+
+#ifndef _LIBCPP___LOCALE_LOCALE_BASE_API_SERENITY_H
+#define _LIBCPP___LOCALE_LOCALE_BASE_API_SERENITY_H
+
+#include <stddef.h>
+
+#include <__support/ibm/locale_mgmt_zos.h>
+#include <__support/xlocale/__posix_l_fallback.h>
+#include <__support/xlocale/__strtonum_fallback.h>
+#include <clocale>
+#include <cstdlib>
+#include <ctype.h>
+#include <cwctype>
+
+#endif // _LIBCPP___LOCALE_LOCALE_BASE_API_SERENITY_H
diff --git a/zig/lib/libcxx/include/__locale_dir/messages.h b/zig/lib/libcxx/include/__locale_dir/messages.h
index c04bf04025ff0ab99370bc201a5cf14f475aa485..0a9ee60e0e6bd02061ab0ffd04d096e4fab65976 100644
--- a/zig/lib/libcxx/include/__locale_dir/messages.h
+++ b/zig/lib/libcxx/include/__locale_dir/messages.h
@@ -22,7 +22,7 @@
 
 #  if defined(__unix__) || (defined(__APPLE__) && defined(__MACH__))
 // Most unix variants have catopen.  These are the specific ones that don't.
-#    if !defined(__BIONIC__) && !defined(_NEWLIB_VERSION) && !defined(__EMSCRIPTEN__)
+#    if !defined(__BIONIC__) && !defined(_NEWLIB_VERSION) && !defined(__EMSCRIPTEN__) && !defined(__serenity__)
 #      define _LIBCPP_HAS_CATOPEN 1
 #      include <nl_types.h>
 #    else
diff --git a/zig/lib/libcxx/include/__support/ibm/locale_mgmt_zos.h b/zig/lib/libcxx/include/__support/ibm/locale_mgmt_zos.h
index 5fc04b6b4b2990c1a5f5b7fae083108c27e907b5..787cc04d57929537d73d871ffd10d1467c3565cf 100644
--- a/zig/lib/libcxx/include/__support/ibm/locale_mgmt_zos.h
+++ b/zig/lib/libcxx/include/__support/ibm/locale_mgmt_zos.h
@@ -10,7 +10,7 @@
 #ifndef _LIBCPP___SUPPORT_IBM_LOCALE_MGMT_ZOS_H
 #define _LIBCPP___SUPPORT_IBM_LOCALE_MGMT_ZOS_H
 
-#if defined(__MVS__)
+#if defined(__MVS__) || defined(__serenity__)
 #  include <locale.h>
 #  include <string>
 
diff --git a/zig/lib/libcxx/src/include/config_elast.h b/zig/lib/libcxx/src/include/config_elast.h
index 7edff2d9375d46f465a1d72b916b1ccb1a555724..ba24e85be8d0a2b4502d5986377081c1bcd036ee 100644
--- a/zig/lib/libcxx/src/include/config_elast.h
+++ b/zig/lib/libcxx/src/include/config_elast.h
@@ -37,6 +37,8 @@
 #  define _LIBCPP_ELAST 4095
 #elif defined(__APPLE__)
 // No _LIBCPP_ELAST needed on Apple
+#elif defined(__serenity__)
+// No _LIBCPP_ELAST needed on SerenityOS
 #elif defined(__MVS__)
 #  define _LIBCPP_ELAST 1160
 #elif defined(_LIBCPP_MSVCRT_LIKE)
diff --git a/zig/lib/libcxx/src/support/ibm/xlocale_zos.cpp b/zig/lib/libcxx/src/support/ibm/xlocale_zos.cpp
index 136999ec0b02f8171bbd8d170aca2b68f7d65681..23a56c0f586728e37ee89bba608b1853983bcb94 100644
--- a/zig/lib/libcxx/src/support/ibm/xlocale_zos.cpp
+++ b/zig/lib/libcxx/src/support/ibm/xlocale_zos.cpp
@@ -7,7 +7,9 @@
 //===----------------------------------------------------------------------===//
 
 #include <__assert>
+#ifndef __serenity__
 #include <__support/ibm/xlocale.h>
+#endif
 #include <sstream>
 #include <vector>
 
diff --git a/zig/src/libs/libcxx.zig b/zig/src/libs/libcxx.zig
index 40da4dd92ff7ff991d803f3e7386e89b44278442..f1d13b2346f33d8236932e460819e7fd09ef5c5e 100644
--- a/zig/src/libs/libcxx.zig
+++ b/zig/src/libs/libcxx.zig
@@ -198,7 +198,8 @@ pub fn buildLibCxx(comp: *Compilation, prog_node: std.Progress.Node) BuildError!
             continue;
         if (std.mem.startsWith(u8, cxx_src, "src/support/win32/") and target.os.tag != .windows)
             continue;
-        if (std.mem.startsWith(u8, cxx_src, "src/support/ibm/") and target.os.tag != .zos)
+        // SerenityOS uses a patched version of src/support/ibm/xlocale_zos.cpp
+        if (std.mem.startsWith(u8, cxx_src, "src/support/ibm/") and (target.os.tag != .zos and target.os.tag != .serenity))
             continue;
 
         var cflags = std.array_list.Managed([]const u8).init(arena);
