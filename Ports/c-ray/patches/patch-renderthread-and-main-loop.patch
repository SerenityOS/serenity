diff --git a/src/renderer/renderer.c b/src/renderer/renderer.c
index 835d99b..aa06055 100644
--- a/src/renderer/renderer.c
+++ b/src/renderer/renderer.c
@@ -20,8 +20,8 @@
 #include "../utils/loaders/textureloader.h"
 
 //Main thread loop speeds
-#define paused_msec 100
-#define active_msec  16
+#define paused_msec 800
+#define active_msec 400
 
 /// @todo Use defaultSettings state struct for this.
 /// @todo Clean this up, it's ugly.
@@ -47,7 +47,6 @@ void render(struct renderer *r) {
 	//Main loop (input)
 	bool threadsHaveStarted = false;
 	float avgRayTime = 0.0f;
-	int pauser = 0;
 	float finalAvg = 0.0f;
 	int ctr = 1;
 	while (r->state.isRendering) {
@@ -66,25 +65,6 @@ void render(struct renderer *r) {
 			sleepMSec(paused_msec);
 		}
 		
-		//Run the sample printing about 4x/s
-		if (pauser == 280 / active_msec) {
-			long remainingSampleCount = ((r->state.tileCount - r->state.finishedTileCount) * r->prefs.tileWidth * r->prefs.tileHeight * r->prefs.sampleCount);
-			double sps = (1000000.0f/finalAvg) * r->prefs.threadCount;
-			long usecTillFinished = remainingSampleCount * finalAvg;
-			char rem[32];
-			smartTime((0.001 * usecTillFinished) / r->prefs.threadCount, rem);
-			float completion = ((float)r->state.finishedTileCount / r->state.tileCount) * 100;
-			logr(info, "[%s%.0f%%%s] Î¼s/ray: %.02f, etf: %s, %.02lfMs/s %s        \r",
-				 KBLU,
-				 KNRM,
-				 completion,
-				 finalAvg,
-				 rem,
-				 0.000001*sps,
-				 r->state.threadStates[0].paused ? "[PAUSED]" : "");
-			pauser = 0;
-		}
-		pauser++;
 		
 		if (!threadsHaveStarted) {
 			threadsHaveStarted = true;
@@ -286,7 +266,7 @@ void *renderThread(void *arg) {
 	//No more tiles to render, exit thread. (render done)
 	tinfo->threadComplete = true;
 	tinfo->currentTileNum = -1;
-	return 0;
+	pthread_exit((void*) arg); //for Serenity, return 0 didn't work
 }
 	
 struct renderer *newRenderer() {
