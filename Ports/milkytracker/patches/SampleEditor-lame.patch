--- MilkyTracker-1.03.00/src/tracker/SampleEditor.cpp	2020-12-09 23:58:14.000000000 +0100
+++ MilkyTracker-1.03.00DD/src/tracker/SampleEditor.cpp	2021-01-04 15:34:24.916551966 +0100
@@ -1545,105 +1545,6 @@
 	if (ClipBoard::getInstance()->isEmpty())
 		return;
 
-	pp_int32 sStart = selectionStart;
-	pp_int32 sEnd = selectionEnd;
-
-	if (hasValidSelection())
-	{
-		if (sStart >= 0 && sEnd >= 0)
-		{
-			if (sEnd < sStart)
-			{
-				pp_int32 s = sEnd; sEnd = sStart; sStart = s;
-			}
-		}
-	}
-	else
-	{
-		sStart = 0;
-		sEnd = sample->samplen;
-	}
-
-	preFilter(NULL, NULL);
-
-	prepareUndo();
-
-	ClipBoard* clipBoard = ClipBoard::getInstance();
-
-	// this filter changes the ratio between above zero to below
-	// zero values by stretching the above half wave and shrinking
-	// the below zero half wave (or the other way around)
-	// the frequency of the sample stays constant, only
-	// if the initial ratio is 1/1
-	// If it's not, the frequency shifts.
-	// To work with non synthetic or already distorted samples,
-	// this ratio needs to be calculated and compensated.
-	// The frequency will still shift if the ratio is not constant
-	// during a longer sample. Ce la vie.
-	pp_int32 ups=0,downs=0,zeros=0;
-	for (pp_int32 i = 0; i < clipBoard->getWidth(); i++)
-	{
-		if (clipBoard->getSampleWord(i)<0)
-		{
-			downs++;
-		}
-		else if (clipBoard->getSampleWord(i)>0)
-		{
-			ups++;
-		}
-		else
-		{
-			zeros++;
-		}
-	}
-	if (!downs && !zeros)
-	{
-		downs++; // div by zero prevention
-	}
-	float phaseRatio = ((float)ups+(0.5f*(float)zeros))/((float)downs+(0.5f*(float)zeros));
-	float step;
-	float j = 0.0f;
-	for (pp_int32 i = sStart; i < sEnd; i++)
-	{
-		float f;
-		float fi = getFloatSampleFromWaveform(i);
-		// we need to oversample at a much shorter step size to
-		// track the zero crossing with sufficient accuracy
-		for (pp_int32 oversample = 0; oversample<0x80; oversample++)
-		{
-			float frac = j - (float)floor(j);
-
-			pp_int16 s = clipBoard->getSampleWord(((pp_int32)j)%clipBoard->getWidth());
-			float f1 = s < 0 ? (s/32768.0f) : (s/32767.0f);
-			s = clipBoard->getSampleWord(((pp_int32)j+1)%clipBoard->getWidth());
-			float f2 = s < 0 ? (s/32768.0f) : (s/32767.0f);
-
-			f = (1.0f-frac)*f1 + frac*f2;
-
-			step = powf(16.0f,fabsf(fi));
-			// the lower half wave is matched
-			// to keep the frequency constant
-			if (f*fi<0.0f)
-			{
-				step = 1.0f / (1.0f + (1.0f-(1.0f/step)));
-			}
-			// which needs to be compensated for a nonzero
-			// initial half wave ratio
-			if (f<0.0f)
-			{
-				step = step * (1.0f/phaseRatio);
-			}
-			// we advance by a fraction due to oversampling
-			j+=step*(1.0f/0x80);
-		}
-		while (j>clipBoard->getWidth()) j-=clipBoard->getWidth();
-		setFloatSampleInWaveform(i, f);
-	}
-
-	finishUndo();
-
-	postFilter();
-
 }
 
 void SampleEditor::tool_FLPasteSample(const FilterParameters* par)
