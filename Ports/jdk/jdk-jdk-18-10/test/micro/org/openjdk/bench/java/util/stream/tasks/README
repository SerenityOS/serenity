Copyright (c) 2014, Oracle and/or its affiliates. All rights reserved.
DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.

This code is free software; you can redistribute it and/or modify it
under the terms of the GNU General Public License version 2 only, as
published by the Free Software Foundation.  Oracle designates this
particular file as subject to the "Classpath" exception as provided
by Oracle in the LICENSE file that accompanied this code.

This code is distributed in the hope that it will be useful, but WITHOUT
ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
version 2 for more details (a copy is included in the LICENSE file that
accompanied this code).

You should have received a copy of the GNU General Public License version
2 along with this work; if not, write to the Free Software Foundation,
Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.

Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
or visit www.oracle.com if you need additional information or have any
questions.

=======================================================================

The tests are divided by scenario.

Each scenario has the problem it tries to solve, and it does that with several options:
  - BulkBench only compares handmade solutions vs. JDK bulk operations, without resorting to lambdas/methodrefs
  - LambdaBench does bulk operations with lambdas/methodrefs
  - XtrasBench has some other interesting options

All tests in these benchmarks follow the following naming convention.
Test names is the concatenation of several markers:

{hm|bulk}: infrastructure used
  - hm: "handmade" version which users would presumably implement otherwise
  - bulk: JDK8-ish bulk operation

{seq|par}: parallelism mode
  - seq: sequential mode
  - par: parallel mode; in "hm" case, this might have different implementations

{.|inner|lambda|mref}: functional interface type
  - .: no specific meaning
  - inner: explicit inner class
  - lambda: JDK8-ish lambda
  - mref: JDK8-ish method ref

E.g. bulk_seq_inner is the test harnesses JDK8 bulk operations in sequential mode, and explicit inner class as function

All benchmarks should be executed in the following modes (see -t harness cmdline option):
 - single mode (thread = 1),
 - core mode   (thread = number of cores),
 - max mode    (thread = number of HW threads).
