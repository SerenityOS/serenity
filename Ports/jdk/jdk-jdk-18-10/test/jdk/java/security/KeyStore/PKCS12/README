The test KeytoolReaderP12Test.java depends on keystore data files and validates 
with output generated by keystore list/export commands

KeyStore File                      storetype  aliasname  keyalg  SignatureAlgorithm
------                             ------     ------     ------  ---
api_private_key.p12.data           pkcs12     pkcs12testenduser1    RSA 1024	MD5withRSA
api_private_key_not_match.p12.data pkcs12     pkcs12testca          RSA 2048	SHA1withRSA
api_cert_chain.p12.data		   pkcs12     pkcs12testenduser1    RSA 1024	MD5withRSA
api_two_pass.p12.data              pkcs12     pkcs12testca          RSA 2048	SHA1withRSA
netscape_self.p12.data		   pkcs12     pkcs12testenduser1    RSA 1023 	MD5withRSA
mozilla_self.p12.data		   pkcs12     pkcs12testenduser1    RSA 1023 	MD5withRSA
ie_self.pfx.data		   pkcs12     a3aa3db3-3ec2-4d8b-8cf1-4d3c54afe386  RSA 1023 MD5withRSA
ie_chain.pfx.data		   pkcs12     4e3053da-ff8e-46d2-b6d1-c38e431dea1f  RSA 1023 MD5withRSA

Following keystore commands were used 	
1. Generate keystore and along with keypair
<JAVA-HOME>/bin/keytool -genkey -v -alias pkcs12test -keyalg "RSA" -keysize 2048 
-sigalg "SHA1withRSA" -dname "cn=PKCS12 Test CA, ou=Security SQE, o=JavaSoft, 
c=US" -validity 7300 -keypass storepass -keystore ks-pkcs.data -storepass 
storepass -storetype pkcs12

2. Export certificate 
<JAVA-HOME>/bin/keytool -export -alias pkcs12test -keystore ks-pkcs.data 
-storetype pkcs12 -storepass storepass -file pkcs12testCA.cer.data

3. Import certificate
<JAVA-HOME>/bin/keytool -import -alias pkcs12test -keystore ks-pkcs.data 
-storepass storepass -file pkcs12testCA.cer.data
