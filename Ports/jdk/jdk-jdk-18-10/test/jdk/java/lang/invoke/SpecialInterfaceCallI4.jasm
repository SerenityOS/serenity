/*
 * Copyright (c) 2018, Oracle and/or its affiliates. All rights reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This code is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 only, as
 * published by the Free Software Foundation.
 *
 * This code is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * version 2 for more details (a copy is included in the LICENSE file that
 * accompanied this code).
 *
 * You should have received a copy of the GNU General Public License version
 * 2 along with this work; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
 * or visit www.oracle.com if you need additional information or have any
 * questions.
 */

// invokeDirect is modified to use invokespecial instead of invokevirtual

interface SpecialInterfaceCall$I4 implements SpecialInterfaceCall$I1
  version 55:0
{
    public static Method invokeDirect:"(LSpecialInterfaceCall$I4;)V"
      stack 1 locals 2
    {
        aload_0;
        invokespecial Method java/lang/Object.toString:"()Ljava/lang/String;";
        astore_1;
        return;
    }

    public static Method invokeDirectFinal:"(LSpecialInterfaceCall$I4;)V"
      stack 1 locals 2
    {
        aload_0;
        invokespecial Method java/lang/Object.getClass:"()Ljava/lang/Class;";
        astore_1;
        return;
    }
    static abstract interface InnerClass I4=class SpecialInterfaceCall$I4 of class SpecialInterfaceCall;
    static abstract interface InnerClass I1=class SpecialInterfaceCall$I1 of class SpecialInterfaceCall;

} // end Class SpecialInterfaceCall$I4
