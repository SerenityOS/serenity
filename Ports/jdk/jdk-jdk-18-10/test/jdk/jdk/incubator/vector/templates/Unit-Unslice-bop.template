    static $type$[] [[TEST]]($type$[] a, $type$[] b, int origin, int part, int idx) {
        $type$[] res = new $type$[SPECIES.length()];
        for (int i = 0, j = 0; i < SPECIES.length(); i++){
            if (part == 0) {
                if (i < origin)
                    res[i] = b[idx+i];
                else {
                    res[i] = a[idx+j];
                    j++;
                }
            } else if (part == 1) {
                if (i < origin)
                    res[i] = a[idx+SPECIES.length()-origin+i];
                else {
                    res[i] = b[idx+origin+j];
                    j++;
                }
            }
        }
        return res;
    }

    @Test(dataProvider = "$type$BinaryOpProvider")
    static void [[TEST]]$vectorteststype$Binary(IntFunction<$type$[]> fa, IntFunction<$type$[]> fb) {
[[KERNEL]]
        assertArraysEquals(r, a, b, origin, part, $vectorteststype$::[[TEST]]);
    }
