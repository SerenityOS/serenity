    static $type$[] [[TEST]]($type$[] a, $type$[] b, int origin, boolean[] mask, int idx) {
        $type$[] res = new $type$[SPECIES.length()];
        for (int i = 0, j = 0; i < SPECIES.length(); i++){
            if(i+origin < SPECIES.length())
                res[i] = mask[i] ? a[idx+i+origin] : ($type$)0;
            else {
                res[i] = mask[i] ? b[idx+j] : ($type$)0;
                j++;
            }
        }
        return res;
    }

    @Test(dataProvider = "$type$BinaryOpMaskProvider")
    static void [[TEST]]$vectorteststype$Masked(IntFunction<$type$[]> fa, IntFunction<$type$[]> fb,
    IntFunction<boolean[]> fm) {
[[KERNEL]]
        assertArraysEquals(r, a, b, origin, mask, $vectorteststype$::[[TEST]]);
    }
