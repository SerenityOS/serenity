    static boolean test[[TEST]]($type$ a) {
        return [[TEST_OP]];
    }

    @Test(dataProvider = "$type$TestOpProvider")
    static void [[TEST]]$vectorteststype$(IntFunction<$type$[]> fa) {
        $type$[] a = fa.apply(SPECIES.length());

        for (int ic = 0; ic < INVOC_COUNT; ic++) {
            for (int i = 0; i < a.length; i += SPECIES.length()) {
                $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
                VectorMask<$Wideboxtype$> mv = av.test(VectorOperators.[[TEST]]);

                // Check results as part of computation.
                for (int j = 0; j < SPECIES.length(); j++) {
                    Assert.assertEquals(mv.laneIsSet(j), test[[TEST]](a[i + j]));
                }
            }
        }
    }

    @Test(dataProvider = "$type$TestOpMaskProvider")
    static void [[TEST]]Masked$vectorteststype$SmokeTest(IntFunction<$type$[]> fa,
                                          IntFunction<boolean[]> fm) {
        $type$[] a = fa.apply(SPECIES.length());
        boolean[] mask = fm.apply(SPECIES.length());
        VectorMask<$Wideboxtype$> vmask = VectorMask.fromArray(SPECIES, mask, 0);

        for (int i = 0; i < a.length; i += SPECIES.length()) {
            $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);
            VectorMask<$Wideboxtype$> mv = av.test(VectorOperators.[[TEST]], vmask);

            // Check results as part of computation.
            for (int j = 0; j < SPECIES.length(); j++) {
                Assert.assertEquals(mv.laneIsSet(j),  vmask.laneIsSet(j) && test[[TEST]](a[i + j]));
            }
        }
    }
