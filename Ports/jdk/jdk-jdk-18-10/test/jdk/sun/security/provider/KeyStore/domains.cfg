// domain containing a single keystore
domain system {
    keystore truststore 
        keystoreType="JKS"
        keystoreURI="${java.home}/lib/security/cacerts";
};

// domain containing two JKS keystores
domain system_plus {
    keystore truststore 
        keystoreType="JKS"
        keystoreURI="${java.home}/lib/security/cacerts";
    keystore pw_keystore 
        keystoreType="JKS"
        keystoreURI="${test.src}/pw.jks";
};

// domain containing a mixture of keystores
domain keystores
    keystoreType="PKCS12" {
        keystore policy_keystore 
            keystoreType="JKS"
            keystoreURI="${test.src}/../PolicyFile/Alias.keystore";
        keystore pw_keystore 
            keystoreType="CaseExactJKS"
            keystoreURI="${test.src}/pw.jks";
        keystore eckeystore1
            keystoreURI="${test.src}/../../pkcs11/ec/pkcs12/secp256r1server-secp384r1ca.p12";
};

// domain containing a mixture of keystores
domain keystores_tmp
    keystoreType="PKCS12" {
        keystore policy_keystore 
            keystoreType="JKS"
            keystoreURI="${user.dir}/Alias.keystore_tmp";
        keystore pw_keystore 
            keystoreType="CaseExactJKS"
            keystoreURI="${user.dir}/pw.jks_tmp";
        keystore eckeystore1
            keystoreURI="${user.dir}/secp256r1server-secp384r1ca.p12_tmp";
};

// domain where passwords are supplied via environment variables
domain system_env 
    keystoreType="JKS"
    keystorePasswordEnv="KEYSTORE_PWD" {
        keystore env_keystore
            keystoreURI="${test.src}/pw.jks";
        keystore env_truststore
            keystoreURI="${java.home}/lib/security/cacerts"
            keystorePasswordEnv="TRUSTSTORE_PWD";
};

// empty domain
domain empty
    keystoreType="JKS"
    keystoreProviderName="SUN" {
        keystore empty
            keystoreURI="${user.dir}/empty.jks";
};
