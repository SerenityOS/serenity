/*
 * Copyright (c) 2017, 2019, Oracle and/or its affiliates. All rights reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This code is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 only, as
 * published by the Free Software Foundation.
 *
 * This code is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * version 2 for more details (a copy is included in the LICENSE file that
 * accompanied this code).
 *
 * You should have received a copy of the GNU General Public License version
 * 2 along with this work; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
 * or visit www.oracle.com if you need additional information or have any
 * questions.
 *
 */

/*
 * @test
 * @bug 8154587
 * @summary Check that invokevirtual of clone() finds the clone() method that
 *          is local to the calling class.
 * @compile DefMethClone.jasm SuperClass.jasm I1.java HasLocalClone.jasm
 * @run main/othervm -XX:+UnlockDiagnosticVMOptions -XX:-BytecodeVerificationRemote -XX:-BytecodeVerificationLocal HasLocalClone
 */

// The below .jasm code implements the following java code:
//
// public class HasLocalClone extends SuperClass implements I1 {
//
//     public Object clone() {
//         return "In HasLocalClone's clone()";
//     }
//
//     static Object test(SuperClass a) { return a.clone(); }
//
//     public static void main(String[] args) {
//         String s = (String)test(new HasLocalClone());
//         if (!s.equals("In HasLocalCloneC's clone()")) {
//             throw new RuntimeException("Wrong clone() called: " + s);
//         }
//     }
// }


super public class HasLocalClone extends SuperClass implements I1 version 54:0 {

    public Method "<init>":"()V" stack 1 locals 1 {
        aload_0;
        invokespecial    Method SuperClass."<init>":"()V";
        return;
    }

    public Method clone:"()Ljava/lang/Object;" stack 1 locals 1 {
        ldc    String "In HasLocalClone\'s clone()";
        areturn;
    }

    static Method test:"(LSuperClass;)Ljava/lang/Object;" stack 1 locals 1 {
        aload_0;
        invokevirtual    Method SuperClass.clone:"()Ljava/lang/Object;";
        areturn;
    }

    public static Method main:"([Ljava/lang/String;)V" stack 3 locals 2 {
        new    class HasLocalClone;
        dup;
        invokespecial    Method "<init>":"()V";
        invokestatic    Method test:"(LSuperClass;)Ljava/lang/Object;";
        checkcast    class java/lang/String;
        astore_1;
        aload_1;
        ldc    String "In HasLocalClone\'s clone()";
        invokevirtual    Method java/lang/String.equals:"(Ljava/lang/Object;)Z";
        ifne    L37;
        new    class java/lang/RuntimeException;
        dup;
        aload_1;
        invokedynamic    InvokeDynamic REF_invokeStatic:java/lang/invoke/StringConcatFactory.makeConcatWithConstants:"(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;":makeConcatWithConstants:"(Ljava/lang/String;)Ljava/lang/String;" String "Wrong clone() called: ";
        invokespecial    Method java/lang/RuntimeException."<init>":"(Ljava/lang/String;)V";
        athrow;
      L37:    stack_frame_type append;
        locals_map class java/lang/String;
        return;
    }

    public static final InnerClass Lookup=class java/lang/invoke/MethodHandles$Lookup of class java/lang/invoke/MethodHandles;

} // end Class HasLocalClone
