#
# Copyright (c) 2015, 2018, Oracle and/or its affiliates. All rights reserved.
# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
#
# This code is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License version 2 only, as
# published by the Free Software Foundation.  Oracle designates this
# particular file as subject to the "Classpath" exception as provided
# by Oracle in the LICENSE file that accompanied this code.
#
# This code is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
# version 2 for more details (a copy is included in the LICENSE file that
# accompanied this code).
#
# You should have received a copy of the GNU General Public License version
# 2 along with this work; if not, write to the Free Software Foundation,
# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
#
# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
# or visit www.oracle.com if you need additional information or have any
# questions.
#

main.usage.summary=\
Usage: {0} <options> --module-path <modulepath> --add-modules <module>[,<module>...]\n\
\Use --help for a list of possible options

main.usage=\
Usage: {0} <options> --module-path <modulepath> --add-modules <module>[,<module>...]\n\
\Possible options include:

main.opt.help=\
\  -h, --help, -?                        Print this help message

main.opt.version=\
\      --version                         Version information

main.opt.module-path=\
\  -p, --module-path <path>              Module path.\n\
\                                        If not specified, the JDK's jmods directory\n\
\                                        will be used, if it exists. If specified,\n\
\                                        but it does not contain the java.base module,\n\
\                                        the JDK's jmods directory will be added,\n\
\                                        if it exists.

main.opt.add-modules=\
\      --add-modules <mod>[,<mod>...]    Root modules to resolve in addition to the\n\
\                                        initial modules. <mod> can also be ALL-MODULE-PATH.

main.opt.limit-modules=\
\      --limit-modules <mod>[,<mod>...]  Limit the universe of observable\n\
\                                        modules

main.opt.output=\
\      --output <path>                   Location of output path

main.opt.launcher=\
\      --launcher <name>=<module>[/<mainclass>]\n\
\                                        Add a launcher command of the given\n\
\                                        name for the module and the main class\n\
\                                        if specified  

main.opt.bind-services=\
\      --bind-services                   Link in service provider modules and\n\
\                                        their dependences

main.opt.suggest-providers=\
\      --suggest-providers [<name>,...]  Suggest providers that implement the\n\
\                                        given service types from the module path

main.command.files=\
\      @<filename>                       Read options from file

main.opt.endian=\
\      --endian <little|big>             Byte order of generated jimage\n\
\                                        (default:native)

main.opt.save-opts=\
\      --save-opts <filename>            Save jlink options in the given file

main.opt.ignore-signing-information=\
\      --ignore-signing-information      Suppress a fatal error when signed\n\
\                                        modular JARs are linked in the image.\n\
\                                        The signature related files of the\n\
\                                        signed modular JARs are not copied to\n\
\                                        the runtime image.

main.opt.verbose=\
\  -v, --verbose                         Enable verbose tracing

main.msg.bug=\
An exception has occurred in jlink. \
Please file a bug at the Java Bug Database (http://bugreport.java.com/bugreport/) \
after checking the database for duplicates. \
Include your program and the following diagnostic in your report.  Thank you.

main.extended.help=\
\List of available plugins:

main.extended.help.footer=\
\For options requiring a <pattern-list>, the value will be a comma separated\n\
\list of elements each using one the following forms:\n\
\  <glob-pattern>\n\
\  glob:<glob-pattern>\n\
\  regex:<regex-pattern>\n\
\  @<filename> where filename is the name of a file containing patterns to be\n\
\              used, one pattern per line\n\
\n\


error.prefix=Error:
warn.prefix=Warning:

err.empty.module.path=empty module path
err.jlink.version.mismatch=jlink version {0}.{1} does not match target java.base version {2}.{3}
err.automatic.module:automatic module cannot be used with jlink: {0} from {1}
err.unknown.byte.order:unknown byte order {0}
err.launcher.main.class.empty:launcher main class name cannot be empty: {0}
err.launcher.module.name.empty:launcher module name cannot be empty: {0}
err.launcher.value.format:launcher value should be of form <command>=<module>[/<main-class>]: {0}
err.output.must.be.specified:--output must be specified
err.modulepath.must.be.specified:--module-path is not specified and this runtime image does not contain jmods directory.
err.mods.must.be.specified:no modules specified to {0}
err.path.not.found=path not found: {0}
err.path.not.valid=invalid path: {0}
err.image.must.exist=image {0} does not exist or is not a directory
err.existing.image.invalid=existing image is not valid
err.file.not.found=cannot find file: {0}
err.file.error=cannot access file: {0}
err.dir.exists={0} already exists
err.badpattern=bad pattern {0}
err.unknown.option=unknown option: {0}
err.missing.arg=no value given for {0}
err.internal.error=internal error: {0} {1} {2}
err.invalid.arg.for.option={0} does not accept \"{1}\" argument
err.option.after.class=option must be specified before classes: {0}
err.option.unsupported={0} not supported: {1}
err.orphan.arguments=invalid argument: {0}
err.config.defaults=property {0} is missing from configuration
err.config.defaults.value=wrong value in defaults property: {0}
err.bom.generation=bom file generation failed: {0}
err.not.a.module.directory=directory {0} does not contain module-info.class file under it
err.cannot.read.module.info=cannot read module descriptor from {0}
err.not.modular.format=selected module {0} ({1}) not in jmod or modular JAR format
err.signing=signed modular JAR {0} is currently not supported,\
\ use --ignore-signing-information to suppress error
warn.signing=WARNING: signed modular JAR {0} is currently not supported
warn.invalid.arg=invalid classname or pathname not exist: {0}
warn.split.package=package {0} defined in {1} {2}
warn.provider.notfound=No provider found for service specified to --suggest-providers: {0}
no.suggested.providers=--bind-services option is specified. No additional providers suggested.
suggested.providers.header=Suggested providers
providers.header=Providers
