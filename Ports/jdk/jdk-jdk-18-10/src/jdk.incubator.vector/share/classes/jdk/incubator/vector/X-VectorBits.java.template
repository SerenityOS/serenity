/*
 * Copyright (c) 2017, 2021, Oracle and/or its affiliates. All rights reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This code is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 only, as
 * published by the Free Software Foundation.  Oracle designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Oracle in the LICENSE file that accompanied this code.
 *
 * This code is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * version 2 for more details (a copy is included in the LICENSE file that
 * accompanied this code).
 *
 * You should have received a copy of the GNU General Public License version
 * 2 along with this work; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
 * or visit www.oracle.com if you need additional information or have any
 * questions.
 */
package jdk.incubator.vector;

import java.nio.ByteBuffer;
import java.util.Arrays;
import java.util.Objects;
import java.util.function.IntUnaryOperator;

import jdk.internal.vm.annotation.ForceInline;
import jdk.internal.vm.vector.VectorSupport;

import static jdk.internal.vm.vector.VectorSupport.*;

import static jdk.incubator.vector.VectorOperators.*;

#warn This file is preprocessed before being compiled

@SuppressWarnings("cast")  // warning: redundant cast
final class $vectortype$ extends $abstractvectortype$ {
    static final $Type$Species VSPECIES =
        ($Type$Species) $Type$Vector.SPECIES_$BITS$;

    static final VectorShape VSHAPE =
        VSPECIES.vectorShape();

    static final Class<$vectortype$> VCLASS = $vectortype$.class;

    static final int VSIZE = VSPECIES.vectorBitSize();

    static final int VLENGTH = VSPECIES.laneCount(); // used by the JVM

    static final Class<$Boxtype$> ETYPE = $type$.class; // used by the JVM

    $vectortype$($type$[] v) {
        super(v);
    }

    // For compatibility as $vectortype$::new,
    // stored into species.vectorFactory.
    $vectortype$(Object v) {
        this(($type$[]) v);
    }

    static final $vectortype$ ZERO = new $vectortype$(new $type$[VLENGTH]);
    static final $vectortype$ IOTA = new $vectortype$(VSPECIES.iotaArray());

    static {
        // Warm up a few species caches.
        // If we do this too much we will
        // get NPEs from bootstrap circularity.
        VSPECIES.dummyVector();
        VSPECIES.withLanes(LaneType.BYTE);
    }

    // Specialized extractors

    @ForceInline
    final @Override
    public $Type$Species vspecies() {
        // ISSUE:  This should probably be a @Stable
        // field inside AbstractVector, rather than
        // a megamorphic method.
        return VSPECIES;
    }

    @ForceInline
    @Override
    public final Class<$Boxtype$> elementType() { return $type$.class; }

    @ForceInline
    @Override
    public final int elementSize() { return $Boxtype$.SIZE; }

    @ForceInline
    @Override
    public final VectorShape shape() { return VSHAPE; }

    @ForceInline
    @Override
    public final int length() { return VLENGTH; }

    @ForceInline
    @Override
    public final int bitSize() { return VSIZE; }

    @ForceInline
    @Override
    public final int byteSize() { return VSIZE / Byte.SIZE; }

    /*package-private*/
    @ForceInline
    final @Override
    $type$[] vec() {
        return ($type$[])getPayload();
    }

    // Virtualized constructors

    @Override
    @ForceInline
    public final $vectortype$ broadcast($type$ e) {
        return ($vectortype$) super.broadcastTemplate(e);  // specialize
    }

#if[!long]
    @Override
    @ForceInline
    public final $vectortype$ broadcast(long e) {
        return ($vectortype$) super.broadcastTemplate(e);  // specialize
    }
#end[!long]

    @Override
    @ForceInline
    $masktype$ maskFromArray(boolean[] bits) {
        return new $masktype$(bits);
    }

    @Override
    @ForceInline
    $shuffletype$ iotaShuffle() { return $shuffletype$.IOTA; }

    @ForceInline
    $shuffletype$ iotaShuffle(int start, int step, boolean wrap) {
      if (wrap) {
        return ($shuffletype$)VectorSupport.shuffleIota(ETYPE, $shuffletype$.class, VSPECIES, VLENGTH, start, step, 1,
                (l, lstart, lstep, s) -> s.shuffleFromOp(i -> (VectorIntrinsics.wrapToRange(i*lstep + lstart, l))));
      } else {
        return ($shuffletype$)VectorSupport.shuffleIota(ETYPE, $shuffletype$.class, VSPECIES, VLENGTH, start, step, 0,
                (l, lstart, lstep, s) -> s.shuffleFromOp(i -> (i*lstep + lstart)));
      }
    }

    @Override
    @ForceInline
    $shuffletype$ shuffleFromBytes(byte[] reorder) { return new $shuffletype$(reorder); }

    @Override
    @ForceInline
    $shuffletype$ shuffleFromArray(int[] indexes, int i) { return new $shuffletype$(indexes, i); }

    @Override
    @ForceInline
    $shuffletype$ shuffleFromOp(IntUnaryOperator fn) { return new $shuffletype$(fn); }

    // Make a vector of the same species but the given elements:
    @ForceInline
    final @Override
    $vectortype$ vectorFactory($type$[] vec) {
        return new $vectortype$(vec);
    }

    @ForceInline
    final @Override
    Byte$bits$Vector asByteVectorRaw() {
        return (Byte$bits$Vector) super.asByteVectorRawTemplate();  // specialize
    }

    @ForceInline
    final @Override
    AbstractVector<?> asVectorRaw(LaneType laneType) {
        return super.asVectorRawTemplate(laneType);  // specialize
    }

    // Unary operator

    @ForceInline
    final @Override
    $vectortype$ uOp(FUnOp f) {
        return ($vectortype$) super.uOpTemplate(f);  // specialize
    }

    @ForceInline
    final @Override
    $vectortype$ uOp(VectorMask<$Boxtype$> m, FUnOp f) {
        return ($vectortype$)
            super.uOpTemplate(($masktype$)m, f);  // specialize
    }

    // Binary operator

    @ForceInline
    final @Override
    $vectortype$ bOp(Vector<$Boxtype$> v, FBinOp f) {
        return ($vectortype$) super.bOpTemplate(($vectortype$)v, f);  // specialize
    }

    @ForceInline
    final @Override
    $vectortype$ bOp(Vector<$Boxtype$> v,
                     VectorMask<$Boxtype$> m, FBinOp f) {
        return ($vectortype$)
            super.bOpTemplate(($vectortype$)v, ($masktype$)m,
                              f);  // specialize
    }

    // Ternary operator

    @ForceInline
    final @Override
    $vectortype$ tOp(Vector<$Boxtype$> v1, Vector<$Boxtype$> v2, FTriOp f) {
        return ($vectortype$)
            super.tOpTemplate(($vectortype$)v1, ($vectortype$)v2,
                              f);  // specialize
    }

    @ForceInline
    final @Override
    $vectortype$ tOp(Vector<$Boxtype$> v1, Vector<$Boxtype$> v2,
                     VectorMask<$Boxtype$> m, FTriOp f) {
        return ($vectortype$)
            super.tOpTemplate(($vectortype$)v1, ($vectortype$)v2,
                              ($masktype$)m, f);  // specialize
    }

    @ForceInline
    final @Override
    $type$ rOp($type$ v, FBinOp f) {
        return super.rOpTemplate(v, f);  // specialize
    }

    @Override
    @ForceInline
    public final <F>
    Vector<F> convertShape(VectorOperators.Conversion<$Boxtype$,F> conv,
                           VectorSpecies<F> rsp, int part) {
        return super.convertShapeTemplate(conv, rsp, part);  // specialize
    }

    @Override
    @ForceInline
    public final <F>
    Vector<F> reinterpretShape(VectorSpecies<F> toSpecies, int part) {
        return super.reinterpretShapeTemplate(toSpecies, part);  // specialize
    }

    // Specialized algebraic operations:

    // The following definition forces a specialized version of this
    // crucial method into the v-table of this class.  A call to add()
    // will inline to a call to lanewise(ADD,), at which point the JIT
    // intrinsic will have the opcode of ADD, plus all the metadata
    // for this particular class, enabling it to generate precise
    // code.
    //
    // There is probably no benefit to the JIT to specialize the
    // masked or broadcast versions of the lanewise method.

    @Override
    @ForceInline
    public $vectortype$ lanewise(Unary op) {
        return ($vectortype$) super.lanewiseTemplate(op);  // specialize
    }

    @Override
    @ForceInline
    public $vectortype$ lanewise(Binary op, Vector<$Boxtype$> v) {
        return ($vectortype$) super.lanewiseTemplate(op, v);  // specialize
    }

#if[!FP]
    /*package-private*/
    @Override
    @ForceInline $vectortype$
    lanewiseShift(VectorOperators.Binary op, int e) {
        return ($vectortype$) super.lanewiseShiftTemplate(op, e);  // specialize
    }
#end[!FP]

    /*package-private*/
    @Override
    @ForceInline
    public final
    $vectortype$
    lanewise(VectorOperators.Ternary op, Vector<$Boxtype$> v1, Vector<$Boxtype$> v2) {
        return ($vectortype$) super.lanewiseTemplate(op, v1, v2);  // specialize
    }

    @Override
    @ForceInline
    public final
    $vectortype$ addIndex(int scale) {
        return ($vectortype$) super.addIndexTemplate(scale);  // specialize
    }

    // Type specific horizontal reductions

    @Override
    @ForceInline
    public final $type$ reduceLanes(VectorOperators.Associative op) {
        return super.reduceLanesTemplate(op);  // specialized
    }

    @Override
    @ForceInline
    public final $type$ reduceLanes(VectorOperators.Associative op,
                                    VectorMask<$Boxtype$> m) {
        return super.reduceLanesTemplate(op, m);  // specialized
    }

    @Override
    @ForceInline
    public final long reduceLanesToLong(VectorOperators.Associative op) {
        return (long) super.reduceLanesTemplate(op);  // specialized
    }

    @Override
    @ForceInline
    public final long reduceLanesToLong(VectorOperators.Associative op,
                                        VectorMask<$Boxtype$> m) {
        return (long) super.reduceLanesTemplate(op, m);  // specialized
    }

    @ForceInline
    public VectorShuffle<$Boxtype$> toShuffle() {
        return super.toShuffleTemplate($shuffletype$.class); // specialize
    }

    // Specialized unary testing

    @Override
    @ForceInline
    public final $masktype$ test(Test op) {
        return super.testTemplate($masktype$.class, op);  // specialize
    }

    // Specialized comparisons

    @Override
    @ForceInline
    public final $masktype$ compare(Comparison op, Vector<$Boxtype$> v) {
        return super.compareTemplate($masktype$.class, op, v);  // specialize
    }

    @Override
    @ForceInline
    public final $masktype$ compare(Comparison op, $type$ s) {
        return super.compareTemplate($masktype$.class, op, s);  // specialize
    }

#if[!long]
    @Override
    @ForceInline
    public final $masktype$ compare(Comparison op, long s) {
        return super.compareTemplate($masktype$.class, op, s);  // specialize
    }
#end[!long]

    @Override
    @ForceInline
    public $vectortype$ blend(Vector<$Boxtype$> v, VectorMask<$Boxtype$> m) {
        return ($vectortype$)
            super.blendTemplate($masktype$.class,
                                ($vectortype$) v,
                                ($masktype$) m);  // specialize
    }

    @Override
    @ForceInline
    public $vectortype$ slice(int origin, Vector<$Boxtype$> v) {
        return ($vectortype$) super.sliceTemplate(origin, v);  // specialize
    }

    @Override
    @ForceInline
    public $vectortype$ slice(int origin) {
        return ($vectortype$) super.sliceTemplate(origin);  // specialize
    }

    @Override
    @ForceInline
    public $vectortype$ unslice(int origin, Vector<$Boxtype$> w, int part) {
        return ($vectortype$) super.unsliceTemplate(origin, w, part);  // specialize
    }

    @Override
    @ForceInline
    public $vectortype$ unslice(int origin, Vector<$Boxtype$> w, int part, VectorMask<$Boxtype$> m) {
        return ($vectortype$)
            super.unsliceTemplate($masktype$.class,
                                  origin, w, part,
                                  ($masktype$) m);  // specialize
    }

    @Override
    @ForceInline
    public $vectortype$ unslice(int origin) {
        return ($vectortype$) super.unsliceTemplate(origin);  // specialize
    }

    @Override
    @ForceInline
    public $vectortype$ rearrange(VectorShuffle<$Boxtype$> s) {
        return ($vectortype$)
            super.rearrangeTemplate($shuffletype$.class,
                                    ($shuffletype$) s);  // specialize
    }

    @Override
    @ForceInline
    public $vectortype$ rearrange(VectorShuffle<$Boxtype$> shuffle,
                                  VectorMask<$Boxtype$> m) {
        return ($vectortype$)
            super.rearrangeTemplate($shuffletype$.class,
                                    ($shuffletype$) shuffle,
                                    ($masktype$) m);  // specialize
    }

    @Override
    @ForceInline
    public $vectortype$ rearrange(VectorShuffle<$Boxtype$> s,
                                  Vector<$Boxtype$> v) {
        return ($vectortype$)
            super.rearrangeTemplate($shuffletype$.class,
                                    ($shuffletype$) s,
                                    ($vectortype$) v);  // specialize
    }

    @Override
    @ForceInline
    public $vectortype$ selectFrom(Vector<$Boxtype$> v) {
        return ($vectortype$)
            super.selectFromTemplate(($vectortype$) v);  // specialize
    }

    @Override
    @ForceInline
    public $vectortype$ selectFrom(Vector<$Boxtype$> v,
                                   VectorMask<$Boxtype$> m) {
        return ($vectortype$)
            super.selectFromTemplate(($vectortype$) v,
                                     ($masktype$) m);  // specialize
    }


#if[FP]
    @ForceInline
    @Override
    public $type$ lane(int i) {
#if[!Max]
        $bitstype$ bits;
        switch(i) {
            case 0: bits = laneHelper(0); break;
#if[!1L]
            case 1: bits = laneHelper(1); break;
#if[!2L]
            case 2: bits = laneHelper(2); break;
            case 3: bits = laneHelper(3); break;
#if[!4L]
            case 4: bits = laneHelper(4); break;
            case 5: bits = laneHelper(5); break;
            case 6: bits = laneHelper(6); break;
            case 7: bits = laneHelper(7); break;
#if[!8L]
            case 8: bits = laneHelper(8); break;
            case 9: bits = laneHelper(9); break;
            case 10: bits = laneHelper(10); break;
            case 11: bits = laneHelper(11); break;
            case 12: bits = laneHelper(12); break;
            case 13: bits = laneHelper(13); break;
            case 14: bits = laneHelper(14); break;
            case 15: bits = laneHelper(15); break;
#end[!8L]
#end[!4L]
#end[!2L]
#end[!1L]
            default: throw new IllegalArgumentException("Index " + i + " must be zero or positive, and less than " + VLENGTH);
        }
#else[!Max]
        if (i < 0 || i >= VLENGTH) {
            throw new IllegalArgumentException("Index " + i + " must be zero or positive, and less than " + VLENGTH);
        }
        $bitstype$ bits = laneHelper(i);
#end[!Max]
        return $Type$.$bitstype$BitsTo$Fptype$(bits);
    }

    public $bitstype$ laneHelper(int i) {
        return ($bitstype$) VectorSupport.extract(
                     VCLASS, ETYPE, VLENGTH,
                     this, i,
                     (vec, ix) -> {
                     $type$[] vecarr = vec.vec();
                     return (long)$Type$.$type$To$Bitstype$Bits(vecarr[ix]);
                     });
    }

    @ForceInline
    @Override
    public $vectortype$ withLane(int i, $type$ e) {
#if[!Max]
        switch(i) {
            case 0: return withLaneHelper(0, e);
#if[!1L]
            case 1: return withLaneHelper(1, e);
#if[!2L]
            case 2: return withLaneHelper(2, e);
            case 3: return withLaneHelper(3, e);
#if[!4L]
            case 4: return withLaneHelper(4, e);
            case 5: return withLaneHelper(5, e);
            case 6: return withLaneHelper(6, e);
            case 7: return withLaneHelper(7, e);
#if[!8L]
            case 8: return withLaneHelper(8, e);
            case 9: return withLaneHelper(9, e);
            case 10: return withLaneHelper(10, e);
            case 11: return withLaneHelper(11, e);
            case 12: return withLaneHelper(12, e);
            case 13: return withLaneHelper(13, e);
            case 14: return withLaneHelper(14, e);
            case 15: return withLaneHelper(15, e);
#end[!8L]
#end[!4L]
#end[!2L]
#end[!1L]
            default: throw new IllegalArgumentException("Index " + i + " must be zero or positive, and less than " + VLENGTH);
        }
#else[!Max]
        if (i < 0 || i >= VLENGTH) {
            throw new IllegalArgumentException("Index " + i + " must be zero or positive, and less than " + VLENGTH);
        }
        return withLaneHelper(i, e);
#end[!Max]
    }

    public $vectortype$ withLaneHelper(int i, $type$ e) {
        return VectorSupport.insert(
                                VCLASS, ETYPE, VLENGTH,
                                this, i, (long)$Type$.$type$To$Bitstype$Bits(e),
                                (v, ix, bits) -> {
                                    $type$[] res = v.vec().clone();
                                    res[ix] = $Type$.$bitstype$BitsTo$Type$(($bitstype$)bits);
                                    return v.vectorFactory(res);
                                });
    }
#else[FP]
    @ForceInline
    @Override
    public $type$ lane(int i) {
#if[!Max]
        switch(i) {
            case 0: return laneHelper(0);
#if[!1L]
            case 1: return laneHelper(1);
#if[!2L]
            case 2: return laneHelper(2);
            case 3: return laneHelper(3);
#if[!4L]
            case 4: return laneHelper(4);
            case 5: return laneHelper(5);
            case 6: return laneHelper(6);
            case 7: return laneHelper(7);
#if[!8L]
            case 8: return laneHelper(8);
            case 9: return laneHelper(9);
            case 10: return laneHelper(10);
            case 11: return laneHelper(11);
            case 12: return laneHelper(12);
            case 13: return laneHelper(13);
            case 14: return laneHelper(14);
            case 15: return laneHelper(15);
#if[!16L]
            case 16: return laneHelper(16);
            case 17: return laneHelper(17);
            case 18: return laneHelper(18);
            case 19: return laneHelper(19);
            case 20: return laneHelper(20);
            case 21: return laneHelper(21);
            case 22: return laneHelper(22);
            case 23: return laneHelper(23);
            case 24: return laneHelper(24);
            case 25: return laneHelper(25);
            case 26: return laneHelper(26);
            case 27: return laneHelper(27);
            case 28: return laneHelper(28);
            case 29: return laneHelper(29);
            case 30: return laneHelper(30);
            case 31: return laneHelper(31);
#if[!32L]
            case 32: return laneHelper(32);
            case 33: return laneHelper(33);
            case 34: return laneHelper(34);
            case 35: return laneHelper(35);
            case 36: return laneHelper(36);
            case 37: return laneHelper(37);
            case 38: return laneHelper(38);
            case 39: return laneHelper(39);
            case 40: return laneHelper(40);
            case 41: return laneHelper(41);
            case 42: return laneHelper(42);
            case 43: return laneHelper(43);
            case 44: return laneHelper(44);
            case 45: return laneHelper(45);
            case 46: return laneHelper(46);
            case 47: return laneHelper(47);
            case 48: return laneHelper(48);
            case 49: return laneHelper(49);
            case 50: return laneHelper(50);
            case 51: return laneHelper(51);
            case 52: return laneHelper(52);
            case 53: return laneHelper(53);
            case 54: return laneHelper(54);
            case 55: return laneHelper(55);
            case 56: return laneHelper(56);
            case 57: return laneHelper(57);
            case 58: return laneHelper(58);
            case 59: return laneHelper(59);
            case 60: return laneHelper(60);
            case 61: return laneHelper(61);
            case 62: return laneHelper(62);
            case 63: return laneHelper(63);
#end[!32L]
#end[!16L]
#end[!8L]
#end[!4L]
#end[!2L]
#end[!1L]
            default: throw new IllegalArgumentException("Index " + i + " must be zero or positive, and less than " + VLENGTH);
        }
#else[!Max]
        if (i < 0 || i >= VLENGTH) {
            throw new IllegalArgumentException("Index " + i + " must be zero or positive, and less than " + VLENGTH);
        }
        return laneHelper(i);
#end[!Max]
    }

    public $type$ laneHelper(int i) {
        return ($type$) VectorSupport.extract(
                                VCLASS, ETYPE, VLENGTH,
                                this, i,
                                (vec, ix) -> {
                                    $type$[] vecarr = vec.vec();
                                    return (long)vecarr[ix];
                                });
    }

    @ForceInline
    @Override
    public $vectortype$ withLane(int i, $type$ e) {
#if[!Max]
        switch (i) {
            case 0: return withLaneHelper(0, e);
#if[!1L]
            case 1: return withLaneHelper(1, e);
#if[!2L]
            case 2: return withLaneHelper(2, e);
            case 3: return withLaneHelper(3, e);
#if[!4L]
            case 4: return withLaneHelper(4, e);
            case 5: return withLaneHelper(5, e);
            case 6: return withLaneHelper(6, e);
            case 7: return withLaneHelper(7, e);
#if[!8L]
            case 8: return withLaneHelper(8, e);
            case 9: return withLaneHelper(9, e);
            case 10: return withLaneHelper(10, e);
            case 11: return withLaneHelper(11, e);
            case 12: return withLaneHelper(12, e);
            case 13: return withLaneHelper(13, e);
            case 14: return withLaneHelper(14, e);
            case 15: return withLaneHelper(15, e);
#if[!16L]
            case 16: return withLaneHelper(16, e);
            case 17: return withLaneHelper(17, e);
            case 18: return withLaneHelper(18, e);
            case 19: return withLaneHelper(19, e);
            case 20: return withLaneHelper(20, e);
            case 21: return withLaneHelper(21, e);
            case 22: return withLaneHelper(22, e);
            case 23: return withLaneHelper(23, e);
            case 24: return withLaneHelper(24, e);
            case 25: return withLaneHelper(25, e);
            case 26: return withLaneHelper(26, e);
            case 27: return withLaneHelper(27, e);
            case 28: return withLaneHelper(28, e);
            case 29: return withLaneHelper(29, e);
            case 30: return withLaneHelper(30, e);
            case 31: return withLaneHelper(31, e);
#if[!32L]
            case 32: return withLaneHelper(32, e);
            case 33: return withLaneHelper(33, e);
            case 34: return withLaneHelper(34, e);
            case 35: return withLaneHelper(35, e);
            case 36: return withLaneHelper(36, e);
            case 37: return withLaneHelper(37, e);
            case 38: return withLaneHelper(38, e);
            case 39: return withLaneHelper(39, e);
            case 40: return withLaneHelper(40, e);
            case 41: return withLaneHelper(41, e);
            case 42: return withLaneHelper(42, e);
            case 43: return withLaneHelper(43, e);
            case 44: return withLaneHelper(44, e);
            case 45: return withLaneHelper(45, e);
            case 46: return withLaneHelper(46, e);
            case 47: return withLaneHelper(47, e);
            case 48: return withLaneHelper(48, e);
            case 49: return withLaneHelper(49, e);
            case 50: return withLaneHelper(50, e);
            case 51: return withLaneHelper(51, e);
            case 52: return withLaneHelper(52, e);
            case 53: return withLaneHelper(53, e);
            case 54: return withLaneHelper(54, e);
            case 55: return withLaneHelper(55, e);
            case 56: return withLaneHelper(56, e);
            case 57: return withLaneHelper(57, e);
            case 58: return withLaneHelper(58, e);
            case 59: return withLaneHelper(59, e);
            case 60: return withLaneHelper(60, e);
            case 61: return withLaneHelper(61, e);
            case 62: return withLaneHelper(62, e);
            case 63: return withLaneHelper(63, e);
#end[!32L]
#end[!16L]
#end[!8L]
#end[!4L]
#end[!2L]
#end[!1L]
            default: throw new IllegalArgumentException("Index " + i + " must be zero or positive, and less than " + VLENGTH);
        }
#else[!Max]
        if (i < 0 || i >= VLENGTH) {
            throw new IllegalArgumentException("Index " + i + " must be zero or positive, and less than " + VLENGTH);
        }
        return withLaneHelper(i, e);
#end[!Max]
    }

    public $vectortype$ withLaneHelper(int i, $type$ e) {
        return VectorSupport.insert(
                                VCLASS, ETYPE, VLENGTH,
                                this, i, (long)e,
                                (v, ix, bits) -> {
                                    $type$[] res = v.vec().clone();
                                    res[ix] = ($type$)bits;
                                    return v.vectorFactory(res);
                                });
    }
#end[FP]

    // Mask

    static final class $masktype$ extends AbstractMask<$Boxtype$> {
        static final int VLENGTH = VSPECIES.laneCount();    // used by the JVM
        static final Class<$Boxtype$> ETYPE = $type$.class; // used by the JVM

        $masktype$(boolean[] bits) {
            this(bits, 0);
        }

        $masktype$(boolean[] bits, int offset) {
            super(prepare(bits, offset));
        }

        $masktype$(boolean val) {
            super(prepare(val));
        }

        private static boolean[] prepare(boolean[] bits, int offset) {
            boolean[] newBits = new boolean[VSPECIES.laneCount()];
            for (int i = 0; i < newBits.length; i++) {
                newBits[i] = bits[offset + i];
            }
            return newBits;
        }

        private static boolean[] prepare(boolean val) {
            boolean[] bits = new boolean[VSPECIES.laneCount()];
            Arrays.fill(bits, val);
            return bits;
        }

        @ForceInline
        final @Override
        public $Type$Species vspecies() {
            // ISSUE:  This should probably be a @Stable
            // field inside AbstractMask, rather than
            // a megamorphic method.
            return VSPECIES;
        }

        @ForceInline
        boolean[] getBits() {
            return (boolean[])getPayload();
        }

        @Override
        $masktype$ uOp(MUnOp f) {
            boolean[] res = new boolean[vspecies().laneCount()];
            boolean[] bits = getBits();
            for (int i = 0; i < res.length; i++) {
                res[i] = f.apply(i, bits[i]);
            }
            return new $masktype$(res);
        }

        @Override
        $masktype$ bOp(VectorMask<$Boxtype$> m, MBinOp f) {
            boolean[] res = new boolean[vspecies().laneCount()];
            boolean[] bits = getBits();
            boolean[] mbits = (($masktype$)m).getBits();
            for (int i = 0; i < res.length; i++) {
                res[i] = f.apply(i, bits[i], mbits[i]);
            }
            return new $masktype$(res);
        }

        @ForceInline
        @Override
        public final
        $vectortype$ toVector() {
            return ($vectortype$) super.toVectorTemplate();  // specialize
        }

        /**
         * Helper function for lane-wise mask conversions.
         * This function kicks in after intrinsic failure.
         */
        @ForceInline
        private final <E>
        VectorMask<E> defaultMaskCast(AbstractSpecies<E> dsp) {
            if (length() != dsp.laneCount())
                throw new IllegalArgumentException("VectorMask length and species length differ");
            boolean[] maskArray = toArray();
            return  dsp.maskFactory(maskArray).check(dsp);
        }

        @Override
        @ForceInline
        public <E> VectorMask<E> cast(VectorSpecies<E> dsp) {
            AbstractSpecies<E> species = (AbstractSpecies<E>) dsp;
            if (length() != species.laneCount())
                throw new IllegalArgumentException("VectorMask length and species length differ");
            if (VSIZE == species.vectorBitSize()) {
                Class<?> dtype = species.elementType();
                Class<?> dmtype = species.maskType();
                return VectorSupport.convert(VectorSupport.VECTOR_OP_REINTERPRET,
                    this.getClass(), ETYPE, VLENGTH,
                    dmtype, dtype, VLENGTH,
                    this, species,
                    $Type$$bits$Mask::defaultMaskCast);
            }
            return this.defaultMaskCast(species);
        }

        @Override
        @ForceInline
        public $masktype$ eq(VectorMask<$Boxtype$> mask) {
            Objects.requireNonNull(mask);
            $masktype$ m = ($masktype$)mask;
            return xor(m.not());
        }

        // Unary operations

        @Override
        @ForceInline
        public $masktype$ not() {
            return xor(maskAll(true));
        }

        // Binary operations

        @Override
        @ForceInline
        public $masktype$ and(VectorMask<$Boxtype$> mask) {
            Objects.requireNonNull(mask);
            $masktype$ m = ($masktype$)mask;
            return VectorSupport.binaryOp(VECTOR_OP_AND, $masktype$.class, $bitstype$.class, VLENGTH,
                                             this, m,
                                             (m1, m2) -> m1.bOp(m2, (i, a, b) -> a & b));
        }

        @Override
        @ForceInline
        public $masktype$ or(VectorMask<$Boxtype$> mask) {
            Objects.requireNonNull(mask);
            $masktype$ m = ($masktype$)mask;
            return VectorSupport.binaryOp(VECTOR_OP_OR, $masktype$.class, $bitstype$.class, VLENGTH,
                                             this, m,
                                             (m1, m2) -> m1.bOp(m2, (i, a, b) -> a | b));
        }

        @ForceInline
        /* package-private */
        $masktype$ xor(VectorMask<$Boxtype$> mask) {
            Objects.requireNonNull(mask);
            $masktype$ m = ($masktype$)mask;
            return VectorSupport.binaryOp(VECTOR_OP_XOR, $masktype$.class, $bitstype$.class, VLENGTH,
                                          this, m,
                                          (m1, m2) -> m1.bOp(m2, (i, a, b) -> a ^ b));
        }

        // Mask Query operations

        @Override
        @ForceInline
        public int trueCount() {
            return VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_TRUECOUNT, $masktype$.class, $bitstype$.class, VLENGTH, this,
                                                      (m) -> trueCountHelper((($masktype$)m).getBits()));
        }

        @Override
        @ForceInline
        public int firstTrue() {
            return VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_FIRSTTRUE, $masktype$.class, $bitstype$.class, VLENGTH, this,
                                                      (m) -> firstTrueHelper((($masktype$)m).getBits()));
        }

        @Override
        @ForceInline
        public int lastTrue() {
            return VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_LASTTRUE, $masktype$.class, $bitstype$.class, VLENGTH, this,
                                                      (m) -> lastTrueHelper((($masktype$)m).getBits()));
        }

        // Reductions

        @Override
        @ForceInline
        public boolean anyTrue() {
            return VectorSupport.test(BT_ne, $masktype$.class, $bitstype$.class, VLENGTH,
                                         this, vspecies().maskAll(true),
                                         (m, __) -> anyTrueHelper((($masktype$)m).getBits()));
        }

        @Override
        @ForceInline
        public boolean allTrue() {
            return VectorSupport.test(BT_overflow, $masktype$.class, $bitstype$.class, VLENGTH,
                                         this, vspecies().maskAll(true),
                                         (m, __) -> allTrueHelper((($masktype$)m).getBits()));
        }

        @ForceInline
        /*package-private*/
        static $masktype$ maskAll(boolean bit) {
            return VectorSupport.broadcastCoerced($masktype$.class, $bitstype$.class, VLENGTH,
                                                  (bit ? -1 : 0), null,
                                                  (v, __) -> (v != 0 ? TRUE_MASK : FALSE_MASK));
        }
        private static final $masktype$  TRUE_MASK = new $masktype$(true);
        private static final $masktype$ FALSE_MASK = new $masktype$(false);

#if[intAndMax]

        static boolean[] maskLowerHalf() {
            boolean[] a = new boolean[VLENGTH];
            int len = a.length >> 1;
            for (int i = 0; i < len; i++) {
                a[i] = true;
            }
            return a;
        }

#end[intAndMax]
#if[intAndMax]
        static final IntMaxMask LOWER_HALF_TRUE_MASK = new IntMaxMask(maskLowerHalf());
#end[intAndMax]
    }

    // Shuffle

    static final class $shuffletype$ extends AbstractShuffle<$Boxtype$> {
        static final int VLENGTH = VSPECIES.laneCount();    // used by the JVM
        static final Class<$Boxtype$> ETYPE = $type$.class; // used by the JVM

        $shuffletype$(byte[] reorder) {
            super(VLENGTH, reorder);
        }

        public $shuffletype$(int[] reorder) {
            super(VLENGTH, reorder);
        }

        public $shuffletype$(int[] reorder, int i) {
            super(VLENGTH, reorder, i);
        }

        public $shuffletype$(IntUnaryOperator fn) {
            super(VLENGTH, fn);
        }

        @Override
        public $Type$Species vspecies() {
            return VSPECIES;
        }

        static {
            // There must be enough bits in the shuffle lanes to encode
            // VLENGTH valid indexes and VLENGTH exceptional ones.
            assert(VLENGTH < Byte.MAX_VALUE);
            assert(Byte.MIN_VALUE <= -VLENGTH);
        }
        static final $shuffletype$ IOTA = new $shuffletype$(IDENTITY);

        @Override
        @ForceInline
        public $vectortype$ toVector() {
            return VectorSupport.shuffleToVector(VCLASS, ETYPE, $shuffletype$.class, this, VLENGTH,
                                                    (s) -> (($vectortype$)(((AbstractShuffle<$Boxtype$>)(s)).toVectorTemplate())));
        }

        @Override
        @ForceInline
        public <F> VectorShuffle<F> cast(VectorSpecies<F> s) {
            AbstractSpecies<F> species = (AbstractSpecies<F>) s;
            if (length() != species.laneCount())
                throw new IllegalArgumentException("VectorShuffle length and species length differ");
            int[] shuffleArray = toArray();
            return s.shuffleFromArray(shuffleArray, 0).check(s);
        }

        @ForceInline
        @Override
        public $shuffletype$ rearrange(VectorShuffle<$Boxtype$> shuffle) {
            $shuffletype$ s = ($shuffletype$) shuffle;
            byte[] reorder1 = reorder();
            byte[] reorder2 = s.reorder();
            byte[] r = new byte[reorder1.length];
            for (int i = 0; i < reorder1.length; i++) {
                int ssi = reorder2[i];
                r[i] = reorder1[ssi];  // throws on exceptional index
            }
            return new $shuffletype$(r);
        }
    }

    // ================================================

    // Specialized low-level memory operations.

    @ForceInline
    @Override
    final
    $abstractvectortype$ fromArray0($type$[] a, int offset) {
        return super.fromArray0Template(a, offset);  // specialize
    }

#if[short]
    @ForceInline
    @Override
    final
    $abstractvectortype$ fromCharArray0(char[] a, int offset) {
        return super.fromCharArray0Template(a, offset);  // specialize
    }
#end[short]

#if[byte]
    @ForceInline
    @Override
    final
    $abstractvectortype$ fromBooleanArray0(boolean[] a, int offset) {
        return super.fromBooleanArray0Template(a, offset);  // specialize
    }
#end[byte]

    @ForceInline
    @Override
    final
    $abstractvectortype$ fromByteArray0(byte[] a, int offset) {
        return super.fromByteArray0Template(a, offset);  // specialize
    }

    @ForceInline
    @Override
    final
    $abstractvectortype$ fromByteBuffer0(ByteBuffer bb, int offset) {
        return super.fromByteBuffer0Template(bb, offset);  // specialize
    }

    @ForceInline
    @Override
    final
    void intoArray0($type$[] a, int offset) {
        super.intoArray0Template(a, offset);  // specialize
    }

    @ForceInline
    @Override
    final
    void intoByteArray0(byte[] a, int offset) {
        super.intoByteArray0Template(a, offset);  // specialize
    }

    // End of specialized low-level memory operations.

    // ================================================

}
