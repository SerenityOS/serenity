#
# Copyright (c) 2010, 2020, Oracle and/or its affiliates. All rights reserved.
# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
#
# This code is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License version 2 only, as
# published by the Free Software Foundation.  Oracle designates this
# particular file as subject to the "Classpath" exception as provided
# by Oracle in the LICENSE file that accompanied this code.
#
# This code is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
# version 2 for more details (a copy is included in the LICENSE file that
# accompanied this code).
#
# You should have received a copy of the GNU General Public License version
# 2 along with this work; if not, write to the Free Software Foundation,
# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
#
# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
# or visit www.oracle.com if you need additional information or have any
# questions.
#

err.prefix=Error:

err.bad.constant.pool=error while reading constant pool for {0}: {1}
err.class.not.found=class not found: {0}
err.crash=A serious internal error has occurred: {0}\nPlease file a bug report, and include the following information:\n{1}
err.end.of.file=unexpected end of file while reading {0}
err.file.not.found=file not found: {0}
err.incompatible.options=bad combination of options: {0}
err.internal.error=internal error: {0} {1} {2}
err.invalid.arg.for.option=invalid argument for option: {0}
err.ioerror=IO error reading {0}: {1}
err.missing.arg=no value given for {0}
err.no.classes.specified=no classes specified
err.not.standard.file.manager=can only specify class files when using a standard file manager
err.invalid.use.of.option=invalid use of option: {0}
err.unknown.option=unknown option: {0}
err.no.SourceFile.attribute=no SourceFile attribute
err.source.file.not.found=source file not found
err.bad.innerclasses.attribute=bad InnerClasses attribute for {0}
err.nomem=Insufficient memory. To increase memory use -J-Xmx option.
err.cant.find.module=Cannot find module {0}
err.cant.find.module.ex=Problem finding module {0}: {1}
err.only.for.launcher=This option can only be used when invoking javap from the command-line launcher.
err.fatal.err=Fatal error: {0}

main.usage.summary=\
Usage: {0} <options> <classes>\n\
use --help for a list of possible options

warn.prefix=Warning:
warn.unexpected.class=File {0} does not contain class {1}

note.prefix=Note:

main.usage=\
Usage: {0} <options> <classes>\n\
where possible options include:


main.opt.help=\
\  --help -help -h -?               Print this help message

main.opt.version=\
\  -version                         Version information

main.opt.v=\
\  -v  -verbose                     Print additional information

main.opt.l=\
\  -l                               Print line number and local variable tables

main.opt.public=\
\  -public                          Show only public classes and members

main.opt.protected=\
\  -protected                       Show protected/public classes and members

main.opt.package=\
\  -package                         Show package/protected/public classes\n\
\                                   and members (default)

main.opt.p=\
\  -p  -private                     Show all classes and members

main.opt.c=\
\  -c                               Disassemble the code

main.opt.s=\
\  -s                               Print internal type signatures

main.opt.class_path=\
\  --class-path <path>              Specify where to find user class files

main.opt.classpath=\
\  -classpath <path>                Specify where to find user class files

main.opt.cp=\
\  -cp <path>                       Specify where to find user class files

main.opt.bootclasspath=\
\  -bootclasspath <path>            Override location of bootstrap class files

main.opt.upgrade_module_path=\
\  --upgrade-module-path <path>     Specify where to find upgradeable modules

main.opt.system=\
\  --system <jdk>                   Specify where to find system modules

main.opt.module_path=\
\  --module-path <path>             Specify where to find application modules

main.opt.multi_release=\
\  --multi-release <version>        Specify the version to use in multi-release JAR files

main.opt.constants=\
\  -constants                       Show final constants

main.opt.sysinfo=\
\  -sysinfo                         Show system info (path, size, date, SHA-256 hash)\n\
\                                   of class being processed

main.opt.module=\
\  --module <module>, -m <module>   Specify module containing classes to be disassembled

main.opt.J=\
\  -J<vm-option>                    Specify a VM option

main.usage.foot=\n\
GNU-style options may use '=' instead of whitespace to separate the name of an option\n\
from its value.\n\
\n\
Each class to be shown may be specified by a filename, a URL, or by its fully\n\
qualified class name. Examples:\n\
\   path/to/MyClass.class\n\
\   jar:file:///path/to/MyJar.jar!/mypkg/MyClass.class\n\
\   java.lang.Object\n
