#
# Copyright (c) 2016, 2019, Oracle and/or its affiliates. All rights reserved.
# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
#
# This code is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License version 2 only, as
# published by the Free Software Foundation.  Oracle designates this
# particular file as subject to the "Classpath" exception as provided
# by Oracle in the LICENSE file that accompanied this code.
#
# This code is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
# version 2 for more details (a copy is included in the LICENSE file that
# accompanied this code).
#
# You should have received a copy of the GNU General Public License version
# 2 along with this work; if not, write to the Free Software Foundation,
# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
#
# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
# or visit www.oracle.com if you need additional information or have any
# questions.
#

main.usage=\
Usage: jdeprscan [options] '{dir|jar|class}' ...\n\
\n\
options:\n\
\        --class-path PATH\n\
\        --for-removal\n\
\        --full-version\n\
\  -? -h --help\n\
\  -l    --list\n\
\        --release {0}\n\
\  -v    --verbose\n\
\        --version

main.help=\
Scans each argument for usages of deprecated APIs. An argument\n\
may be a directory specifying the root of a package hierarchy,\n\
a JAR file, a class file, or a class name. The class name must be\n\
specified using a fully qualified class name using the $ separator\n\
character for nested classes, for example,\n\
\n\
\    java.lang.Thread$State\n\
\n\
The --class-path option provides a search path for resolution\n\
of dependent classes.\n\
\n\
The --for-removal option limits scanning or listing to APIs that are\n\
deprecated for removal. Cannot be used with a release value of 6, 7, or 8.\n\
\n\
The --full-version option prints out the full version string of the tool.\n\
\n\
The --help (-? -h) option prints out a full help message.\n\
\n\
The --list (-l) option prints out the set of deprecated APIs. No scanning is done,\n\
so no directory, jar, or class arguments should be provided.\n\
\n\
The --release option specifies the Java SE release that provides the set\n\
of deprecated APIs for scanning.\n\
\n\
The --verbose (-v) option enables additional message output during processing.\n\
\n\
The --version option prints out the abbreviated version string of the tool.

main.xhelp=\
Unsupported options:\n\
\n\
\  --Xload-class CLASS\n\
\      Loads deprecation information from the named class.\n\
\  --Xload-csv CSVFILE\n\
\      Loads deprecation information from the named CSV file.\n\
\  --Xload-dir DIR\n\
\      Loads deprecation information from the class hierarchy\n\
\      at the named directory.\n\
\  --Xload-jar JARFILE\n\
\      Loads deprecation information from the named JAR file.\n\
\  --Xload-jdk9 JAVA_HOME\n\
\      Loads deprecation information from the JDK located at\n\
\      JAVA_HOME, which must be a modular JDK.\n\
\  --Xload-old-jdk JAVA_HOME\n\
\      Loads deprecation information from the JDK located at\n\
\      JAVA_HOME, which must not be a modular JDK. Instead, the\n\
\      named JDK must be a "classic" JDK with an rt.jar file.\n\
\  --Xload-self\n\
\      Loads deprecation information by traversing the jrt:\n\
\      filesystem of the running JDK image.\n\
\  --Xcompiler-arg ARG\n\
\      Adds ARG to the list of compiler arguments.\n\
\  --Xcsv-comment COMMENT\n\
\      Adds COMMENT as a comment line to the output CSV file.\n\
\      Only effective if -Xprint-csv is also supplied.\n\
\  --Xhelp\n\
\      Prints this message.\n\
\  --Xprint-csv\n\
\      Prints a CSV file containing the loaded deprecation information\n\
\      instead of scanning any classes or JAR files.

scan.process.class=Processing class {0}...

# The "removal tag": empty for normal deprecations,
# nonempty for removal deprecations; do not translate.
scan.dep.normal=
scan.dep.removal=(forRemoval=true)

scan.err.exception=error: unexpected exception {0}
scan.err.noclass=error: cannot find class {0}
scan.err.nofile=error: cannot find file {0}

# 0: class name, 1: method name, 2: parameter and return types
scan.err.nomethod=error: cannot resolve Methodref {0}.{1}:{2}

scan.head.jar=Jar file {0}:
scan.head.dir=Directory {0}:

# In all of the messages below, 0 and 1 are as follows:
#   0: type kind (class, interface, enum, or annotation type)
#   1: type name
# The last element is generally a "removal tag"; see above.

# 2: class name, 3: removal tag
scan.out.extends={0} {1} extends deprecated class {2} {3}

# 2: interface name, 3: removal tag
scan.out.implements={0} {1} implements deprecated interface {2} {3}

# 2: class name, 3: removal tag
scan.out.usesclass={0} {1} uses deprecated class {2} {3}

# 2: class name, 3: method name, 4: method parameter and return types, 5: removal tag
scan.out.usesmethod={0} {1} uses deprecated method {2}::{3}{4} {5}

# 2: class name, 3: method name, 4: method parameter and return types, 5: removal tag
scan.out.usesintfmethod={0} {1} uses deprecated method {2}::{3}{4} {5}

# 2: class name, 3: field name, 4: removal tag
scan.out.usesfield={0} {1} uses deprecated field {2}::{3} {4}

# 2: field name, 3: type name, 4: removal tag
scan.out.hasfield={0} {1} has field named {2} of deprecated type {3} {4}

# 2: method name, 3: parameter type, 4: removal tag
scan.out.methodparmtype={0} {1} has method named {2} having deprecated parameter type {3} {4}

# 2: method name, 3: return type, 4: removal tag
scan.out.methodrettype={0} {1} has method named {2} having deprecated return type {3} {4}

# 2: class name, 3: method name, 4: method parameter and return types, 5: removal tag
scan.out.methodoverride={0} {1} overrides deprecated method {2}::{3}{4} {5}
