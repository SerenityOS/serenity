// Color nodes by estimated execution frequency. Applies only when control-flow
// graph information is available (from "Global Code Motion" on).

// These colors are generated by running:
// $ python3 extract-colors.py --steps 10 --colormap coolwarm
var step0Color = java.awt.Color.decode("#3b4cc0");
var step1Color = java.awt.Color.decode("#5977e3");
var step2Color = java.awt.Color.decode("#7b9ff9");
var step3Color = java.awt.Color.decode("#9ebeff");
var step4Color = java.awt.Color.decode("#c0d4f5");
var step5Color = java.awt.Color.decode("#dddcdc");
var step6Color = java.awt.Color.decode("#f2cbb7");
var step7Color = java.awt.Color.decode("#f7ac8e");
var step8Color = java.awt.Color.decode("#ee8468");
var step9Color = java.awt.Color.decode("#d65244");
var step10Color = java.awt.Color.decode("#b40426");

var colors = [step0Color, step1Color, step2Color, step3Color, step4Color, step5Color, step6Color, step7Color, step8Color, step9Color, step10Color]
var fractions = [0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0]

// The max value is set to 1.01 instead of 1.0 to workaround a (numerical?)
// issue where nodes with frequencies close (but not equal to) 1.0 are not colored.
colorizeGradientCustom("frequency", 0.0, 1.01, "logarithmic", colors, fractions, 1024);