#
# Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.
# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
#
# This code is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License version 2 only, as
# published by the Free Software Foundation.  Oracle designates this
# particular file as subject to the "Classpath" exception as provided
# by Oracle in the LICENSE file that accompanied this code.
#
# This code is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
# version 2 for more details (a copy is included in the LICENSE file that
# accompanied this code).
#
# You should have received a copy of the GNU General Public License version
# 2 along with this work; if not, write to the Free Software Foundation,
# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
#
# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
# or visit www.oracle.com if you need additional information or have any
# questions.
#

SCOPED_MEMORY_ACCESS_GENSRC_DIR := $(SUPPORT_OUTPUTDIR)/gensrc/java.base/jdk/internal/misc
SCOPED_MEMORY_ACCESS_SRC_DIR := $(TOPDIR)/src/java.base/share/classes/jdk/internal/misc
SCOPED_MEMORY_ACCESS_TEMPLATE := $(SCOPED_MEMORY_ACCESS_SRC_DIR)/X-ScopedMemoryAccess.java.template
SCOPED_MEMORY_ACCESS_BIN_TEMPLATE := $(SCOPED_MEMORY_ACCESS_SRC_DIR)/X-ScopedMemoryAccess-bin.java.template
SCOPED_MEMORY_ACCESS_DEST := $(SCOPED_MEMORY_ACCESS_GENSRC_DIR)/ScopedMemoryAccess.java

################################################################################
# Setup a rule for generating the ScopedMemoryAccess java class
# Param 1 - Variable declaration prefix
# Param 2 - Type with first letter capitalized
define GenerateScopedOp

  $1_Type := $2

  ifeq ($$($1_Type), Byte)
    $1_type := byte
    $1_BoxType := $$($1_Type)

    $1_rawType := $$($1_type)
    $1_RawType := $$($1_Type)
    $1_RawBoxType := $$($1_BoxType)

    $1_ARGS += -Kbyte
  endif

  ifeq ($$($1_Type), Short)
    $1_type := short
    $1_BoxType := $$($1_Type)

    $1_rawType := $$($1_type)
    $1_RawType := $$($1_Type)
    $1_RawBoxType := $$($1_BoxType)
    $1_ARGS += -KUnaligned
  endif

  ifeq ($$($1_Type), Char)
    $1_type := char
    $1_BoxType := Character

    $1_rawType := $$($1_type)
    $1_RawType := $$($1_Type)
    $1_RawBoxType := $$($1_BoxType)
    $1_ARGS += -KUnaligned
  endif

  ifeq ($$($1_Type), Int)
    $1_type := int
    $1_BoxType := Integer

    $1_rawType := $$($1_type)
    $1_RawType := $$($1_Type)
    $1_RawBoxType := $$($1_BoxType)

    $1_ARGS += -KCAS
    $1_ARGS += -KAtomicAdd
    $1_ARGS += -KBitwise
    $1_ARGS += -KUnaligned
  endif

  ifeq ($$($1_Type), Long)
    $1_type := long
    $1_BoxType := $$($1_Type)

    $1_rawType := $$($1_type)
    $1_RawType := $$($1_Type)
    $1_RawBoxType := $$($1_BoxType)

    $1_ARGS += -KCAS
    $1_ARGS += -KAtomicAdd
    $1_ARGS += -KBitwise
    $1_ARGS += -KUnaligned
  endif

  ifeq ($$($1_Type), Float)
    $1_type := float
    $1_BoxType := $$($1_Type)

    $1_rawType := int
    $1_RawType := Int
    $1_RawBoxType := Integer

    $1_ARGS += -KCAS
    $1_ARGS += -KfloatingPoint
  endif

  ifeq ($$($1_Type), Double)
    $1_type := double
    $1_BoxType := $$($1_Type)

    $1_rawType := long
    $1_RawType := Long
    $1_RawBoxType := Long

    $1_ARGS += -KCAS
    $1_ARGS += -KfloatingPoint
  endif

  ifneq ($$(findstring $$($1_Type), Byte Short Char Int Long Float Double), )
    $1_ARGS += -KAtomicAdd
  endif

  ifneq ($$(findstring $$($1_Type), Boolean Byte Short Char Int Long), )
    $1_ARGS += -KBitwise
  endif

  ifneq ($$(findstring $$($1_Type), Byte Short Char), )
    $1_ARGS += -KShorterThanInt
  endif
endef

################################################################################
# Setup a rule for generating the ScopedMemoryAccess java class

SCOPE_MEMORY_ACCESS_TYPES := Byte Short Char Int Long Float Double
$(foreach t, $(SCOPE_MEMORY_ACCESS_TYPES), \
  $(eval $(call GenerateScopedOp,BIN_$t,$t)))
	
$(SCOPED_MEMORY_ACCESS_DEST): $(BUILD_TOOLS_JDK) $(SCOPED_MEMORY_ACCESS_TEMPLATE) $(SCOPED_MEMORY_ACCESS_BIN_TEMPLATE)
	$(call MakeDir, $(SCOPED_MEMORY_ACCESS_GENSRC_DIR))
	$(CAT) $(SCOPED_MEMORY_ACCESS_TEMPLATE) > $(SCOPED_MEMORY_ACCESS_DEST)
	$(foreach t, $(SCOPE_MEMORY_ACCESS_TYPES), \
	  $(TOOL_SPP) -nel -K$(BIN_$t_type) -Dtype=$(BIN_$t_type) -DType=$(BIN_$t_Type) $(BIN_$t_ARGS) \
	  -i$(SCOPED_MEMORY_ACCESS_BIN_TEMPLATE) -o$(SCOPED_MEMORY_ACCESS_DEST) ;)
	$(PRINTF) "}\n" >> $(SCOPED_MEMORY_ACCESS_DEST)
	
TARGETS += $(SCOPED_MEMORY_ACCESS_DEST)
