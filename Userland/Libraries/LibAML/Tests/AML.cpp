/*
 * Copyright (c) 2021, the SerenityOS developers.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#include <AK/TestSuite.h> // import first, to prevent warning of VERIFY* redefinition

#include <AK/StringBuilder.h>
#include <LibAML/AML.h>
#include <stdio.h>

// To update the compiled AML, edit test.dsl and then generate a new array with:
// iasl test.dsl && xxd -i test.aml
unsigned char test_aml[] = {
    0x44, 0x53, 0x44, 0x54, 0x06, 0x01, 0x00, 0x00, 0x01, 0x07, 0x53, 0x52,
    0x4e, 0x59, 0x4f, 0x53, 0x53, 0x52, 0x4e, 0x59, 0x44, 0x53, 0x44, 0x54,
    0x01, 0x00, 0x00, 0x00, 0x49, 0x4e, 0x54, 0x4c, 0x09, 0x05, 0x19, 0x20,
    0x10, 0x49, 0x04, 0x5c, 0x00, 0x5b, 0x80, 0x44, 0x42, 0x47, 0x5f, 0x01,
    0x0b, 0x34, 0x12, 0x01, 0x5b, 0x81, 0x0b, 0x44, 0x42, 0x47, 0x5f, 0x01,
    0x44, 0x42, 0x47, 0x42, 0x08, 0x14, 0x2c, 0x44, 0x42, 0x55, 0x47, 0x01,
    0x98, 0x68, 0x60, 0x96, 0x60, 0x60, 0x74, 0x87, 0x60, 0x01, 0x61, 0x70,
    0x00, 0x62, 0xa2, 0x10, 0x95, 0x62, 0x61, 0x70, 0x83, 0x88, 0x60, 0x62,
    0x00, 0x44, 0x42, 0x47, 0x42, 0x75, 0x62, 0x70, 0x0a, 0x0a, 0x44, 0x42,
    0x47, 0x42, 0x10, 0x47, 0x09, 0x5f, 0x53, 0x42, 0x5f, 0x44, 0x42, 0x55,
    0x47, 0x0d, 0x54, 0x68, 0x69, 0x73, 0x20, 0x69, 0x73, 0x20, 0x61, 0x20,
    0x74, 0x65, 0x73, 0x74, 0x00, 0x14, 0x42, 0x06, 0x54, 0x53, 0x54, 0x31,
    0x01, 0x14, 0x10, 0x54, 0x53, 0x54, 0x32, 0x02, 0x44, 0x42, 0x55, 0x47,
    0x68, 0x44, 0x42, 0x55, 0x47, 0x69, 0x44, 0x42, 0x55, 0x47, 0x0d, 0x54,
    0x53, 0x54, 0x31, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x20,
    0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x20, 0x54, 0x53, 0x54, 0x32, 0x00,
    0x54, 0x53, 0x54, 0x32, 0x0d, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x3a,
    0x20, 0x00, 0x68, 0x44, 0x42, 0x55, 0x47, 0x0d, 0x54, 0x53, 0x54, 0x31,
    0x20, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x20, 0x6e, 0x65, 0x73, 0x74,
    0x65, 0x64, 0x20, 0x54, 0x53, 0x54, 0x32, 0x00, 0x44, 0x42, 0x55, 0x47,
    0x0d, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x20, 0x66, 0x75, 0x6e, 0x63,
    0x74, 0x69, 0x6f, 0x6e, 0x20, 0x74, 0x65, 0x73, 0x74, 0x00
};
unsigned int test_aml_len = 262;

class TestHost : public AML::IHost {

};

TEST_CASE(call_write_sysio)
{
    AML::CodeTable aml(test_aml, test_aml_len);
    EXPECT(aml.evaluate());
}

TEST_MAIN(AML)