/*
 * Copyright (c) 2024, Dan Klishch <danilklishch@gmail.com>
 *
 * SPDX-License-Identifier: BSD-2-Clause
 */

#include <LibCompress/AsyncZlib.h>
#include <LibTest/AsyncTestCase.h>
#include <LibTest/AsyncTestStreams.h>

struct InflateTestCase {
    StringView name;
    Vector<u8> input;
    Variant<StringView, Vector<u8>> output;
};

// clang-format off
Vector<InflateTestCase> const test_cases = {
    {
        .name = "Simple"sv,
        .input = {
            0x78, 0x01, 0x01, 0x1D, 0x00, 0xE2, 0xFF, 0x54, 0x68, 0x69, 0x73, 0x20,
            0x69, 0x73, 0x20, 0x61, 0x20, 0x73, 0x69, 0x6D, 0x70, 0x6C, 0x65, 0x20,
            0x74, 0x65, 0x78, 0x74, 0x20, 0x66, 0x69, 0x6C, 0x65, 0x20, 0x3A, 0x29,
            0x99, 0x5E, 0x09, 0xE8
        },
        .output = "This is a simple text file :)"sv,
    },
    {
        .name = "zlib_decompress_with_missing_end_bits"sv,
        .input = {
            0x08, 0xD7, 0x63, 0x30, 0x86, 0x00, 0x01, 0x06, 0x23, 0x25, 0x30, 0x00,
            0x32, 0x42, 0x95, 0x54, 0x83, 0xD0, 0x18, 0x41, 0xA1, 0x50, 0x46, 0x28,
            0x8C, 0xA1, 0x8A, 0xA1, 0x46, 0xC5, 0x35, 0x48, 0xC9, 0x05, 0x99, 0xA1,
            0xA4, 0xE2, 0x02, 0x44, 0x60, 0x93, 0x5D, 0x54, 0x54, 0x9C, 0x20, 0x0C,
            0x17, 0x17, 0x08, 0x43, 0xC5, 0xC9, 0x05, 0xA8, 0x4B, 0x50, 0x50, 0x50,
            0xC4, 0xD1, 0x45, 0x50, 0x80, 0x01, 0x06, 0x00, 0xB6, 0x1F, 0x15, 0xEF
        },
        .output = Vector<u8> {
            0x00, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x10, 0x00, 0x32, 0x22,
            0x22, 0x22, 0x22, 0x22, 0x22, 0x10, 0x00, 0x32, 0x55, 0x22, 0x25, 0x52,
            0x22, 0x22, 0x10, 0x00, 0x32, 0x55, 0x22, 0x25, 0x52, 0x22, 0x22, 0x10,
            0x00, 0x32, 0x55, 0x52, 0x55, 0x52, 0x22, 0x22, 0x10, 0x00, 0x32, 0x55,
            0x55, 0x55, 0x52, 0x22, 0x22, 0x10, 0x00, 0x32, 0x55, 0x25, 0x25, 0x52,
            0x22, 0x22, 0x10, 0x00, 0x32, 0x55, 0x22, 0x25, 0x52, 0x22, 0x22, 0x10,
            0x00, 0x32, 0x55, 0x24, 0x45, 0x52, 0x22, 0x44, 0x10, 0x00, 0x32, 0x55,
            0x24, 0x45, 0x52, 0x22, 0x44, 0x10, 0x00, 0x32, 0x22, 0x24, 0x44, 0x22,
            0x24, 0x44, 0x10, 0x00, 0x32, 0x22, 0x22, 0x44, 0x24, 0x24, 0x42, 0x10,
            0x00, 0x32, 0x22, 0x22, 0x44, 0x44, 0x44, 0x42, 0x10, 0x00, 0x32, 0x22,
            0x22, 0x24, 0x42, 0x44, 0x22, 0x10, 0x00, 0x11, 0x11, 0x11, 0x14, 0x41,
            0x44, 0x11, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
        },
    },
};
// clang-format on

ASYNC_TEST_CASE(decompression)
{
    for (auto const& test : test_cases) {
        outln("Decompressing '{}'...", test.name);

        auto close_expectation = Test::StreamCloseExpectation::Close;
        auto input_partitioning = Test::randomly_partition_input(1, AK::get_random_uniform(50) + 1, test.input.size());
        outln("Input partitioning: {}", input_partitioning);
        auto input_stream = make<Test::AsyncMemoryInputStream>(test.input.span(), close_expectation, move(input_partitioning));
        auto decompressor = Compress::Async::ZlibDecompressor { move(input_stream) };
        auto decompressed_data = co_await Test::read_until_eof(decompressor);

        if (!decompressed_data.is_error()) {
            auto close_error = co_await decompressor.close();
            if (close_error.is_error())
                decompressed_data = close_error.release_error();
        }

        test.output.visit(
            [&](StringView view) {
                EXPECT(!decompressed_data.is_error());
                if (!decompressed_data.is_error())
                    EXPECT_EQ(view, StringView { decompressed_data.value() });
            },
            [&](Vector<u8> const& bytes) {
                EXPECT(!decompressed_data.is_error());
                if (!decompressed_data.is_error())
                    EXPECT_EQ(bytes.span(), decompressed_data.value());
            });
    }
}
